//using Microsoft.AspNetCore.Http;
//using Microsoft.IdentityModel.Protocols;
//using Microsoft.IdentityModel.Protocols.OpenIdConnect;
//using Microsoft.IdentityModel.Tokens;
//using NLog;
//using System;
//using System.Collections.Generic;
//using System.Configuration;
//using System.Globalization;
//using System.IdentityModel.Tokens.Jwt;
//using System.Net;
//using System.Net.Http;
//using System.Net.Http.Headers;
//using System.Security.Claims;
//using System.Threading;
//using System.Threading.Tasks;
//using System.Web;

//namespace SensorDataApi.Security
//{
//    //[TokenValidation]  >> vervangen door een policy https://stackoverflow.com/questions/31464359/how-do-you-create-a-custom-authorizeattribute-in-asp-net-core
//    //[TokenValidation]  >> vervangen door een policy https://stackoverflow.com/questions/31464359/how-do-you-create-a-custom-authorizeattribute-in-asp-net-core
//    //[TokenValidation]  >> vervangen door een policy https://stackoverflow.com/questions/31464359/how-do-you-create-a-custom-authorizeattribute-in-asp-net-core
//    public class TokenValidationHandler: DelegatingHandler
//    {
//        private static Logger logger = LogManager.GetCurrentClassLogger();
//        //
//        // The AAD Instance is the instance of Azure, for example public Azure or Azure China.
//        // The Tenant is the name of the tenant in which this application is registered.
//        // The Authority is the sign-in URL of the tenant.
//        // The Audience is the value the service expects to see in tokens that are addressed to it.
//        //
//        private static string aadInstance = ConfigurationManager.AppSettings["ida:AADInstance"];

//        private static string tenant = ConfigurationManager.AppSettings["ida:Tenant"];
//        private static string audience = ConfigurationManager.AppSettings["ida:Audience"];
//        private static string clientId = ConfigurationManager.AppSettings["ida:ClientId"];
//        private string authority = String.Format(CultureInfo.InvariantCulture, aadInstance, tenant);

//        private static string _issuer = string.Empty;
//        private static ICollection<SecurityKey> _signingKeys = null;
//        private static DateTime _stsMetadataRetrievalTime = DateTime.MinValue;
//        private static string scopeClaimType = "http://schemas.microsoft.com/identity/claims/scope";

//        //
//        // SendAsync checks that incoming requests have a valid access token, and sets the current user identity using that access token.
//        //
//        protected async override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
//        {
//            // Get the jwt bearer token from the authorization header
//            string jwtToken = null;
//            AuthenticationHeaderValue authHeader = request.Headers.Authorization;
//            if (authHeader != null)
//            {
//                jwtToken = authHeader.Parameter;
//            }

//            if (jwtToken == null)
//            {
//                logger.Error("No bearer token provided");
//                HttpResponseMessage response = this.BuildResponseErrorMessage(HttpStatusCode.Unauthorized);
//                return response;
//            }

//            string issuer;
//            ICollection<SecurityKey> signingKeys;

//            try
//            {
//                // The issuer and signingKeys are cached for 24 hours. They are updated if any of the conditions in the if condition is true.
//                if (DateTime.UtcNow.Subtract(_stsMetadataRetrievalTime).TotalHours > 24
//                    || string.IsNullOrEmpty(_issuer)
//                    || _signingKeys == null)
//                {
//                    // Get tenant information that's used to validate incoming jwt tokens
//                    string stsDiscoveryEndpoint = $"{this.authority}/.well-known/openid-configuration";
//                    var configManager = new ConfigurationManager<OpenIdConnectConfiguration>(stsDiscoveryEndpoint, new OpenIdConnectConfigurationRetriever());
//                    var config = await configManager.GetConfigurationAsync(cancellationToken);
//                    _issuer = config.Issuer;
//                    _signingKeys = config.SigningKeys;

//                    _stsMetadataRetrievalTime = DateTime.UtcNow;
//                }

//                issuer = _issuer;
//                signingKeys = _signingKeys;
//            }
//            catch (Exception ex)
//            {
//                logger.Error(ex.Message);
//                return new HttpResponseMessage(HttpStatusCode.InternalServerError);
//            }

//            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();

//            TokenValidationParameters validationParameters = new TokenValidationParameters
//            {
//                // We accept both the App Id URI and the AppId of this service application
//                ValidAudiences = new[] { audience, clientId },

//                // Supports both the Azure AD V1 and V2 endpoint
//                ValidIssuers = new[] { issuer, $"{issuer}/v2.0" },
//                IssuerSigningKeys = signingKeys
//            };

//            try
//            {
//                // Validate token.
//                SecurityToken validatedToken = new JwtSecurityToken();
//                ClaimsPrincipal claimsPrincipal = tokenHandler.ValidateToken(jwtToken, validationParameters, out validatedToken);

//                // Set the ClaimsPrincipal on the current thread.
//                Thread.CurrentPrincipal = claimsPrincipal;

//                // Set the ClaimsPrincipal on HttpContext.Current if the app is running in web hosted environment.
//                if (HttpContext.Current != null)
//                {
//                    HttpContext.Current.User = claimsPrincipal;
//                }

//                // If the token is scoped, verify that required permission is set in the scope claim.
//                if (ClaimsPrincipal.Current.FindFirst(scopeClaimType) != null && ClaimsPrincipal.Current.FindFirst(scopeClaimType).Value != "user_impersonation")
//                {
//                    HttpResponseMessage response = this.BuildResponseErrorMessage(HttpStatusCode.Forbidden);
//                    return response;
//                }

//                return await base.SendAsync(request, cancellationToken);
//            }
//            catch (SecurityTokenValidationException ex)
//            {
//                logger.Error(ex.Message);
//                HttpResponseMessage response = this.BuildResponseErrorMessage(HttpStatusCode.Unauthorized);
//                return response;
//            }
//            catch (Exception ex)
//            {
//                logger.Error(ex.Message);
//                return new HttpResponseMessage(HttpStatusCode.InternalServerError);
//            }
//        }

//        private HttpResponseMessage BuildResponseErrorMessage(HttpStatusCode statusCode)
//        {
//            HttpResponseMessage response = new HttpResponseMessage(statusCode);

//            //
//            // The Scheme should be "Bearer", authorization_uri should point to the tenant url and resource_id should point to the audience.
//            //
//            AuthenticationHeaderValue authenticateHeader = new AuthenticationHeaderValue("Bearer", "authorization_uri=\"" + this.authority + "\"" + "," + "resource_id=" + audience);

//            response.Headers.WwwAuthenticate.Add(authenticateHeader);

//            return response;
//        }
//    }
//}